<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>Pharmacie la plus proche</title>
		<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"/>

		<style>
			#map {
				height: 700px;
				margin: 0;
				padding: 0;
			}
			/* Ajout de tes autres styles ici */
		</style>
	</head>
	<body>

		<div id="map"></div>

		<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
		<script>
			// Fonction pour gérer les erreurs de géolocalisation
			function handleLocationError(error) {
				switch (error.code) {
					case error.PERMISSION_DENIED:
						alert("Veuillez activer la géolocalisation pour continuer. Allez dans vos paramètres et autorisez l'accès à la position.");
						break;
					case error.POSITION_UNAVAILABLE:
						alert("Les informations de position ne sont pas disponibles.");
						break;
					case error.TIMEOUT:
						alert("La demande de géolocalisation a expiré.");
						break;
					default:
						alert("Une erreur inconnue est survenue.");
				}
			}

			// Vérification de la disponibilité de la géolocalisation
			if (!navigator.geolocation) {
				alert("Votre navigateur ne prend pas en charge la géolocalisation.");
			} else {
				// Demande la position de l'utilisateur
				navigator.geolocation.getCurrentPosition(function (position) {
					const userLat = position.coords.latitude;
					const userLng = position.coords.longitude;

					// Initialisation de la carte
					const map = L.map('map').setView([userLat, userLng], 13);

					// Ajout des tuiles de la carte
					L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
						maxZoom: 19,
						attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
					}).addTo(map);

					// Ajout d'un marqueur pour l'utilisateur
					L.marker([userLat, userLng]).addTo(map).bindPopup('Vous êtes ici').openPopup();

					// Récupération des pharmacies à partir du backend
					fetch('{{ path('api_pharmacies') }}').then(response => response.json()).then(pharmacies => {
						let closestPharmacy = null;
						let minDistance = Infinity;

						pharmacies.forEach(pharmacie => {
							const pharmacyLat = pharmacie.latitude;
							const pharmacyLng = pharmacie.longitude;

							// Calcul de la distance entre l'utilisateur et la pharmacie
							const distance = map.distance([userLat, userLng], [pharmacyLat, pharmacyLng]);

							if (distance < minDistance) {
								minDistance = distance;
								closestPharmacy = pharmacie;
							}

							// Ajout de marqueurs pour les pharmacies
							L.marker([pharmacyLat, pharmacyLng]).addTo(map).bindPopup(`<b>${pharmacie.nom}</b><br>Distance: ${distance.toFixed(2)} mètres`);
						});

						// Tracer une ligne vers la pharmacie la plus proche
						if (closestPharmacy) {
							const closestPharmacyLat = closestPharmacy.latitude;
							const closestPharmacyLng = closestPharmacy.longitude;

							// Centrer la carte sur la pharmacie la plus proche avec un zoom plus élevé
							map.setView([closestPharmacyLat, closestPharmacyLng], 16);

							// Requête à l'API OSRM pour obtenir l'itinéraire
							const osrmUrl = `https://router.project-osrm.org/route/v1/foot/${userLng},${userLat};${closestPharmacyLng},${closestPharmacyLat}?geometries=geojson&overview=full`;

							fetch(osrmUrl)
								.then(response => response.json())
								.then(data => {
									// Récupérer la polyline de l'itinéraire
									const route = data.routes[0].geometry.coordinates;
									const latLngRoute = route.map(coord => [coord[1], coord[0]]); // Inverser l'ordre lat, lng

									// Tracer la polyline sur la carte
									L.polyline(latLngRoute, {
										color: 'blue',
										weight: 4,
										opacity: 0.7
									}).addTo(map);

									alert(`La pharmacie la plus proche est ${closestPharmacy.nom} à ${minDistance.toFixed(2)} mètres.`);
								})
								.catch(error => {
									console.error('Erreur lors de la récupération de l\'itinéraire:', error);
								});
						}
					});
				}, handleLocationError, {
					enableHighAccuracy: true,
					timeout: 5000,
					maximumAge: 0
				});
			}
		</script>

		<footer>
		<center>
			<nav class="bottom-nav">
				<a href="{{ path('app_index') }}">
					<img src="{{ asset('images/iconelocapharna.png') }}" id="locfr" width="99" height="40" alt="Pharmacy Icon">
				</a>
			</nav>
			</center>
		</footer>
	</body>
</html>
