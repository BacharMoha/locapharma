{# templates/admin/voir_planning.html.twig #}


{% block stylesheets %}
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
	<style>
		.container {
			margin-top: 50px;
		}
		.btn-add {
			background-color: rgb(0, 149, 52);
			color: #fff;
		}
		.btn-add:hover {
			background-color: rgb(0, 123, 42);
		}
		.btn-edit {
			background-color: #007bff;
			color: #fff;
		}
		.btn-edit:hover {
			background-color: #0056b3;
		}
		.btn-delete {
			background-color: #dc3545;
			color: #fff;
		}
		.btn-delete:hover {
			background-color: #c82333;
		}
		h1 {
			font-family: "Great Vibes", cursive;
			color: #0839CF;
		}
		tbody {
			background-color: rgb(181, 247, 204);
			border-radius: 20px;
			box-shadow: 0 0 10px rgba(0, 0, 0, 0.532);
		}
		.search-bar {
			margin-bottom: 20px;
			position: relative;
		}
		.search-bar input {
			padding-left: 40px;
			border-radius: 20px;
		}
		.search-bar .search-icon {
			position: absolute;
			top: 50%;
			left: 10px;
			transform: translateY(-50%);
			font-size: 20px;
			color: #0839CF;
		}
	</style>
{% endblock %}

{% block body %}
	<nav class="navbar navbar-expand-lg navbar-light bg-light">
		<div class="container-fluid">
			<a class="navbar-brand" href="#"></a>
			<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
				<span class="navbar-toggler-icon"></span>
			</button>
			<div class="collapse navbar-collapse" id="navbarNav">
				<ul class="navbar-nav ms-auto">
					<li class="nav-item dropdown">
						<a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
							Profil
						</a>
						<ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown" style="border-radius: 20px;">
							<li>
								<a class="dropdown-item" href="#">Bachar</a>
							</li>
							<li>
								<a class="dropdown-item" href="#">bachar@example.com</a>
							</li>
							<li><hr class="dropdown-divider"></li>
							<li>
								<a class="dropdown-item text-danger" href="{{ path('app_admingenerale') }}">Déconnexion</a>
							</li>
						</ul>
					</li>
				</ul>
			</div>
		</div>
	</nav>
	<div class="container">
		<h1 class="mb-4">Liste des Plannings de Garde</h1>

		<div class="search-bar">
			<input type="text" class="form-control" id="searchPlannings" placeholder="Rechercher un planning">
			<span class="search-icon">
				<i class="fas fa-search"></i>
			</span>
		</div>

		<a href="{{ path('app_creerplannig') }}" class="btn btn-add mb-3" style="border-radius: 10px; float: right;">Ajouter</a>

		<table class="table table-striped">
    <thead>
        <tr>
            <th>#</th>
            <th>Pharmacie</th>
            <th>Date de Début</th>
            <th>Date de Fin</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="planningsList">
        {% for planning in planning %}
            <tr>
                <td>{{ loop.index }}</td> {# Utilisation correcte de loop.index pour le numéro de la ligne #}
                <td>{{ planning.IdPharmacie.nomPharma }}</td>
                <td>{{ planning.dateDebut|date('H:i:s') }}</td>
                <td>{{ planning.dateFin|date('H:i:s') }}</td>
                <td>
                    <a href="{{ path('app_modifplanning', {id: planning.id}) }}" class="btn btn-edit" style="border-radius: 20px;">Modifier</a>
                    <a href="{{ path('app_deleteplanning', {id: planning.id}) }}" class="btn btn-delete" style="border-radius: 20px;">Supprimer</a>
                </td>
            </tr>
        {% endfor %}
    </tbody>
</table>
 <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item">
                    <a class="page-link" href="#" aria-label="Previous" id="prevPage">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
                <!-- Page numbers will be generated dynamically -->
                <li class="page-item">
                    <a class="page-link" href="#" id="nextPage" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>


		<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js"></script>
		<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

		<script>
            const rowsPerPage = 10;
            const rows = document.querySelectorAll('#planningsList tr');
            const totalPages = Math.ceil(rows.length / rowsPerPage);
            let currentPage = 1;

            function displayRows(page) {
                rows.forEach((row, index) => {
                    row.style.display = (index >= (page - 1) * rowsPerPage && index < page * rowsPerPage) ? '' : 'none';
                });
            }

            function updatePagination() {
                const pagination = document.querySelector('.pagination');
                pagination.innerHTML = '';

                const prevPageItem = document.createElement('li');
                prevPageItem.className = 'page-item' + (currentPage === 1 ? ' disabled' : '');
                prevPageItem.innerHTML = '<a class="page-link" href="#" aria-label="Previous" id="prevPage"><span aria-hidden="true">&laquo;</span></a>';
                pagination.appendChild(prevPageItem);

                for (let i = 1; i <= totalPages; i++) {
                    const pageItem = document.createElement('li');
                    pageItem.className = 'page-item' + (i === currentPage ? ' active' : '');
                    pageItem.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                    pagination.appendChild(pageItem);
                }

                const nextPageItem = document.createElement('li');
                nextPageItem.className = 'page-item' + (currentPage === totalPages ? ' disabled' : '');
                nextPageItem.innerHTML = '<a class="page-link" href="#" aria-label="Next" id="nextPage"><span aria-hidden="true">&raquo;</span></a>';
                pagination.appendChild(nextPageItem);
            }

            document.addEventListener('DOMContentLoaded', function() {
                displayRows(currentPage);
                updatePagination();

                document.querySelector('.pagination').addEventListener('click', function(event) {
                    if (event.target.tagName === 'A') {
                        event.preventDefault();
                        if (event.target.id === 'prevPage') {
                            if (currentPage > 1) {
                                currentPage--;
                                displayRows(currentPage);
                                updatePagination();
                            }
                        } else if (event.target.id === 'nextPage') {
                            if (currentPage < totalPages) {
                                currentPage++;
                                displayRows(currentPage);
                                updatePagination();
                            }
                        } else {
                            currentPage = parseInt(event.target.getAttribute('data-page'));
                            displayRows(currentPage);
                            updatePagination();
                        }
                    }
                });

                document.getElementById('searchPlannings').addEventListener('keyup', function () {
                    let filter = this.value.toLowerCase();
                    rows.forEach(row => {
                        let text = row.textContent.toLowerCase();
                        row.style.display = text.includes(filter) ? '' : 'none';
                    });
                    // Update pagination after search
                    const visibleRows = document.querySelectorAll('#planningsList tr:not([style*="display: none"])');
                    const filteredTotalPages = Math.ceil(visibleRows.length / rowsPerPage);
                    if (currentPage > filteredTotalPages) {
                        currentPage = filteredTotalPages;
                        displayRows(currentPage);
                        updatePagination();
                    }
                });
            });
        </script>
	</div>
    
{% endblock %}
